{"ast":null,"code":"var axios = require(\"axios\"); // let id = \"683f76df7a7cbdb2b673\";\n// let sec = \"5e60cceb98a6183ba4da82b7a4dd5fccce7c358c\";\n//\n\n\nlet id = null;\nlet sec = null;\nlet params = \"?client_id=\" + id + \"&client_secret=\" + sec;\n\nfunction getProfile(username) {\n  return axios.get(\"https://api.github.com/users/\" + username + params).then(function (user) {\n    return user.data;\n  });\n}\n\nfunction getRepos(username) {\n  return axios.get(\"https://api.github.com/users/\" + username + \"/repos\" + params + \"&per_page=100\");\n} // function getStarCount(repos) {\n//   return repos.data.reduce(function (count, repo) {\n//     return count + repo.stargazers_count;\n//   }, 0);\n// }\n\n\nfunction calculateScore(profile, repos) {\n  let followers = profile.followers; // let totalStars = getStarCount(repos);\n\n  return followers * 3 + totalStars;\n}\n\nfunction handleError(error) {\n  console.warn(error);\n  return null;\n}\n\nfunction getUserData(player) {\n  return axios.all([getProfile(player), getRepos(player)]).then(function (data) {\n    let profile = data[0];\n    let repos = data[1];\n    return {\n      profile: profile,\n      score: calculateScore(profile, repos)\n    };\n  });\n}\n\nfunction sortPlayers(players) {\n  return players.sort(function (a, b) {\n    return b.score - a.score;\n  });\n}\n\nmodule.exports = {\n  battle: function (players) {\n    return axios.all(players.map(getUserData)).then(sortPlayers).catch(handleError);\n  } // fetchPopularRepos: function (language) {\n  //   let encodedURI = window.encodeURI(\n  //     \"https://api.github.com/search/repositories?q=stars:>1+language:\" +\n  //       language +\n  //       \"&sort=stars&order=desc&type=Repositories\"\n  //   );\n  //   return axios.get(encodedURI).then(function (response) {\n  //     return response.data.items;\n  //   });\n  // },\n\n};\n/*\nconst order = (props) => {\n  const ingredients = [];\n\n  for (let ingredientName in props.ingredients) {\n    ingredients.push({\n      name: ingredientName,\n      quantity: props.ingredients[ingredientName],\n    });\n  }*/","map":{"version":3,"sources":["/home/aditya/Desktop/gitcomparer/src/Components/api.js"],"names":["axios","require","id","sec","params","getProfile","username","get","then","user","data","getRepos","calculateScore","profile","repos","followers","totalStars","handleError","error","console","warn","getUserData","player","all","score","sortPlayers","players","sort","a","b","module","exports","battle","map","catch"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB,C,CAEA;AACA;AACA;;;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,GAAG,GAAG,IAAV;AACA,IAAIC,MAAM,GAAG,gBAAgBF,EAAhB,GAAqB,iBAArB,GAAyCC,GAAtD;;AAEA,SAASE,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,SAAON,KAAK,CACTO,GADI,CACA,kCAAkCD,QAAlC,GAA6CF,MAD7C,EAEJI,IAFI,CAEC,UAAUC,IAAV,EAAgB;AACpB,WAAOA,IAAI,CAACC,IAAZ;AACD,GAJI,CAAP;AAKD;;AAED,SAASC,QAAT,CAAkBL,QAAlB,EAA4B;AAC1B,SAAON,KAAK,CAACO,GAAN,CACL,kCACED,QADF,GAEE,QAFF,GAGEF,MAHF,GAIE,eALG,CAAP;AAOD,C,CAED;AACA;AACA;AACA;AACA;;;AAEA,SAASQ,cAAT,CAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AACtC,MAAIC,SAAS,GAAGF,OAAO,CAACE,SAAxB,CADsC,CAEtC;;AAEA,SAAOA,SAAS,GAAG,CAAZ,GAAgBC,UAAvB;AACD;;AAED,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACA,SAAO,IAAP;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOtB,KAAK,CACTuB,GADI,CACA,CAAClB,UAAU,CAACiB,MAAD,CAAX,EAAqBX,QAAQ,CAACW,MAAD,CAA7B,CADA,EAEJd,IAFI,CAEC,UAAUE,IAAV,EAAgB;AACpB,QAAIG,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAlB;AACA,QAAII,KAAK,GAAGJ,IAAI,CAAC,CAAD,CAAhB;AAEA,WAAO;AACLG,MAAAA,OAAO,EAAEA,OADJ;AAELW,MAAAA,KAAK,EAAEZ,cAAc,CAACC,OAAD,EAAUC,KAAV;AAFhB,KAAP;AAID,GAVI,CAAP;AAWD;;AAED,SAASW,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,SAAOA,OAAO,CAACC,IAAR,CAAa,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClC,WAAOA,CAAC,CAACL,KAAF,GAAUI,CAAC,CAACJ,KAAnB;AACD,GAFM,CAAP;AAGD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAE,UAAUN,OAAV,EAAmB;AACzB,WAAO1B,KAAK,CACTuB,GADI,CACAG,OAAO,CAACO,GAAR,CAAYZ,WAAZ,CADA,EAEJb,IAFI,CAECiB,WAFD,EAGJS,KAHI,CAGEjB,WAHF,CAAP;AAID,GANc,CAQf;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAlBe,CAAjB;AAoBA","sourcesContent":["var axios = require(\"axios\");\n\n// let id = \"683f76df7a7cbdb2b673\";\n// let sec = \"5e60cceb98a6183ba4da82b7a4dd5fccce7c358c\";\n//\nlet id = null;\nlet sec = null;\nlet params = \"?client_id=\" + id + \"&client_secret=\" + sec;\n\nfunction getProfile(username) {\n  return axios\n    .get(\"https://api.github.com/users/\" + username + params)\n    .then(function (user) {\n      return user.data;\n    });\n}\n\nfunction getRepos(username) {\n  return axios.get(\n    \"https://api.github.com/users/\" +\n      username +\n      \"/repos\" +\n      params +\n      \"&per_page=100\"\n  );\n}\n\n// function getStarCount(repos) {\n//   return repos.data.reduce(function (count, repo) {\n//     return count + repo.stargazers_count;\n//   }, 0);\n// }\n\nfunction calculateScore(profile, repos) {\n  let followers = profile.followers;\n  // let totalStars = getStarCount(repos);\n\n  return followers * 3 + totalStars;\n}\n\nfunction handleError(error) {\n  console.warn(error);\n  return null;\n}\n\nfunction getUserData(player) {\n  return axios\n    .all([getProfile(player), getRepos(player)])\n    .then(function (data) {\n      let profile = data[0];\n      let repos = data[1];\n\n      return {\n        profile: profile,\n        score: calculateScore(profile, repos),\n      };\n    });\n}\n\nfunction sortPlayers(players) {\n  return players.sort(function (a, b) {\n    return b.score - a.score;\n  });\n}\n\nmodule.exports = {\n  battle: function (players) {\n    return axios\n      .all(players.map(getUserData))\n      .then(sortPlayers)\n      .catch(handleError);\n  },\n\n  // fetchPopularRepos: function (language) {\n  //   let encodedURI = window.encodeURI(\n  //     \"https://api.github.com/search/repositories?q=stars:>1+language:\" +\n  //       language +\n  //       \"&sort=stars&order=desc&type=Repositories\"\n  //   );\n\n  //   return axios.get(encodedURI).then(function (response) {\n  //     return response.data.items;\n  //   });\n  // },\n};\n/*\nconst order = (props) => {\n  const ingredients = [];\n\n  for (let ingredientName in props.ingredients) {\n    ingredients.push({\n      name: ingredientName,\n      quantity: props.ingredients[ingredientName],\n    });\n  }*/\n"]},"metadata":{},"sourceType":"module"}